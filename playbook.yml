---

- hosts: all

  pre_tasks:
    - name: Update apt cache if needed
      become: yes
      apt: update_cache=yes cache_valid_time=86400
    - name: Verify that the deployment key is present
      copy:
        src: ~/.ssh/deployment
        dest: /home/ubuntu/.ssh/deployment
        mode: 0400

  tasks:
    - include_vars: system_requirements.yml

    - name: Install system packages
      become: yes
      apt: name={{ item }} state=present
      with_items: "{{ system_requirements }}"

    - name: Make sure that target directory exists
      become: yes
      file:
        path: /srv/apps/{{ app_name}}
        state: directory
        owner: www-data
        group: www-data

    - name: Install nvm
      git:
        repo: https://github.com/creationix/nvm.git
        dest: ~/.nvm
        version: v0.32.0
    
    - name: Source nvm in ~/.profile
      lineinfile:
        dest: ~/.profile
        line: "source ~/.nvm/nvm.sh"
        create: yes


    - name: Install node
      command: bash -lc "nvm install 6.6.0"

    # - name: Install yarn
    #   command: bash -lc "npm install -g yarn@0.18.1"

    - name: Install bower
      command: bash -lc "npm install -g bower"

    - name: Clone repository
      git:
        repo: "{{ repo_url }}"
        dest: "~/{{ app_name }}"
        key_file: /home/ubuntu/.ssh/deployment
        accept_hostkey: yes
        version: "{{ repo_tag }}"
        force: yes
        update: yes

    #- name: Install npm requirements
    #  command: bash -lc "yarn"
    #  args:
    #    chdir: "/home/ubuntu/{{ app_name }}"

    - name: Install npm requirements(until yarn is stable)
      command: bash -lc "npm install"
      args:
        chdir: "/home/ubuntu/{{ app_name }}"

    - name: Check that bower.json exists
      stat:
        path: "/home/ubuntu/{{ app_name }}/bower.json"
      register: bower_stats

    - name: Install bower requirements
      command: bash -lc "bower install"
      args:
        chdir: "/home/ubuntu/{{ app_name }}"
      when: bower_stats.stat.exists == True

    - name: Trigger build
      command: bash -lc "npm run-script prepare-to-deploy"
      args:
        chdir: "/home/ubuntu/{{ app_name }}"

    - name: Copy SSL files
      become: yes
      copy:
        src: ~/Dropbox/ops/ssl/
        dest: /etc/nginx/cert/

    - name: Copy Default nginx config file
      become: yes
      copy:
        src: config_files/nginx_default
        dest: /etc/nginx/sites-available/default

    - name: Copy nginx config file
      become: yes
      template:
        src: config_files/nginx
        dest: /etc/nginx/sites-available/{{ app_name }}
      when: nginx_conf is undefined
      notify:
      - Restart nginx

    - name: Create symlink for nginx default
      become: yes
      file:
        src: /etc/nginx/sites-available/default
        dest: /etc/nginx/sites-enabled/default
        state: link

    - name: Create symlink for nginx
      become: yes
      file:
        src: /etc/nginx/sites-available/{{ app_name }}
        dest: /etc/nginx/sites-enabled/{{ app_name }}
        state: link
      notify:
      - Restart nginx

    - name: Copy app
      command: bash -lc "cp -r /home/ubuntu/{{ app_name }}/dist/* /srv/apps/{{ app_name }}"
      become: yes

    - name: Change app permissions
      become: yes
      file:
        path: /srv/apps/{{ app_name}}
        state: directory
        owner: www-data
        group: www-data
        recurse: yes

  handlers:
    - name: Restart nginx
      become: yes
      service: name=nginx state=restarted
