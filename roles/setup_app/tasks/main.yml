---
- name: Make sure that target directory exists
  become: yes
  file:
    path: /srv/apps/{{ app_name}}
    state: directory
    owner: ubuntu
    group: ubuntu

- name: Install nvm
  local_action:
    module: git
    repo: https://github.com/creationix/nvm.git
    dest: ~/.nvm
    version: v0.32.0
  when: not pure_html

- name: Source nvm in ~/.profile
  local_action:
    module: lineinfile
    dest: "~/.profile"
    line: "source ~/.nvm/nvm.sh"
    create: yes
  when: not pure_html

- name: Install node
  local_action: command bash -lc "nvm install 8"
  when: not pure_html

- name: Install yarn
  local_action: command bash -lc "npm install -g yarn@1.*"
  when: not pure_html and use_yarn

- name: Install bower
  local_action: command bash -lc "npm install -g bower"
  when: not pure_html

- name: Change owner to {{ ansible_ssh_user }}
  become: yes
  command: chown -R {{ ansible_ssh_user }}:{{ ansible_ssh_user }} /srv/apps/{{ app_name }}

- name: Clone repository
  local_action:
    module: git
    repo: "{{ repo_url }}"
    dest: "/tmp/{{ app_name }}"
    key_file: ~/.ssh/deployment
    accept_hostkey: yes
    version: "{{ repo_tag }}"
    force: yes
    update: yes
  when: not pure_html

- name: Clone repository directly to /srv/apps/
  git:
    repo: "{{ repo_url }}"
    dest: "/srv/apps/{{ app_name }}"
    key_file: /home/ubuntu/.ssh/deployment
    accept_hostkey: yes
    version: "{{ repo_tag }}"
    force: yes
    update: yes
  when: pure_html

- name: Copy application config file specified by env_source
  local_action:
    module: copy
    src: "{{ env_source }}"
    dest: /tmp/{{ app_name }}/.env.production
  when: env_source is defined
  tags:
    - update_env

- name: Install npm requirements using yarn
  local_action: command bash -lc "yarn"
  args:
    chdir: "/tmp/{{ app_name }}"
  when: not pure_html and use_yarn

- name: Install npm requirements without yarn
  local_action: command bash -lc "npm install"
  args:
    chdir: "/tmp/{{ app_name }}"
  when: not pure_html and not use_yarn

- name: Check that bower.json exists
  local_action:
    module: stat
    path: "/tmp/{{ app_name }}/bower.json"
  register: bower_stats

- name: Install bower requirements
  local_action: command bash -lc "bower install"
  args:
    chdir: "/tmp/{{ app_name }}"
  when: bower_stats.stat.exists == True

- name: Trigger build
  local_action: command bash -lc "npm run {% if build_task is undefined %}build{% else %}{{build_task}}{% endif %}"
  args:
    chdir: "/tmp/{{ app_name }}"
  when: not pure_html

- name: Copy app
  copy:
    src: "/tmp/{{ app_name }}/{% if build_directory is undefined %}build{% else %}{{build_directory}}{% endif %}/"
    dest: /srv/apps/{{ app_name}}/
  become: yes
  when: not pure_html

- name: Change app permissions
  become: yes
  file:
    path: /srv/apps/{{ app_name}}
    state: directory
    owner: www-data
    group: www-data
    recurse: yes


- name: Delete temporal path
  local_action:
    module: file
    path: /tmp/{{ app_name}}
    state: absent
